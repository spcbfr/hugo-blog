#+HUGO_BASE_DIR: ~/repos/hugo-blog/

* New blog ! :hugo:
:PROPERTIES:
:EXPORT_FILE_NAME: first-blog
:EXPORT_DATE: 2021-10-18
:EXPORT_DESCRIPTION: a completly useless blog post, basically trying out hugo.
:EXPORT_AUTHOR:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :author "Youssef Bouzekri"
:END:
Hello once again to my redesigned blog, this time using [[https://gohugo.io][hugo]] as the backend with [[https://ox-hugo.scripter.co/][ox-hugo]] which converts my org-written blog posts to markdown.

through out this post, I will be testing ox-hugo's features and see what is possible !
** Heading 1
this is fun, hugo supports rich text, so I can have, *bold* and /italic/ text and even ~inline code blocks~
*** heading 2
I don't think I'll ever go beyond heading 2, this is a *very* useful bit of javascript code
#+begin_src js
console.log("hello world")
for(let i = 0; i > 10; i++){
    console.log(i)
}
#+end_src

#+begin_quote
I don't like how quote blocks look, but that is fine tbh.
#+end_quote
I can have lists:
+ Milk
+ House
+ Door
and even ordered ones:
1. what's up
2. I like this very much

* Distro Review :linux:
:PROPERTIES:
:EXPORT_FILE_NAME: distro-review
:EXPORT_DATE: 2021-10-18
:EXPORT_DESCRIPTION: in this blog post, I review every distro I've tried so far
:EXPORT_AUTHOR:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :author "Youssef Bouzekri"
:end:
Over the past year and a half of using linux, I've distrohopped a *lot*, today I am going to review every distro i've ever tried
** Criterias for a good distribution
here are some things that I care about when installing a distro
+ *Software availability* This excludes distros that only have free software in there repositories (like the [[https://www.gnu.org/distros/free-distros.en.html][fsf recommeneded distros]]) most of the software I use is free, but in some cases I can not work without certain propritery packages, like wifi and graphics drivers, programs I need for work, etc..
+ *Up-to-date software* similar to the first point some packages, require up-to-date libraries, this is why I prefer rolling-release distros, but I can live with stable-release distros as long as they have a short update cycle
+ *Minimum bloatware* I like minimal software and distros that come with as little bloat as possible, but not to the point where it would take a month or two for the distro to be even usable (I am looking at you, Linux-from-scratch !)
** Arch Linux
This is the distro I am currently using, and the one that I have been using for a the longest time and that is for good reasons:
+ Pacman is great package manager, I would go as far as to say that *pacman is the best package manager on linux*, it is pretty lightweight, but also comes with a lot of shinny features.
+ The largest software repository, if something exists on linux, you are going to find it in the arch's repositories, or at least in the Arch User Repository (AUR)
+ Arch is *clean out of the box*, This is good because it allows you to pick exactly what software you want to use, and by software I mean everything ! Window manager, Display manager, terminal, productivity suite, etc..

Here is how my arch linux setup looks like at the moment, using xmonad
[[/img/arch-desktop.png]]
** Gentoo
Gentoo is a special kind of distro, it is source based, which means that you get to have much more control of your system, you can pick what init system to use, you can even disable certain parts of programs that you don't need, this means that you will end up with *a minimal system that is designed specificly for you* , and you will also gain *a little bit of a performance boost*, but this comes with it's problems:
- because gentoo is source-based, most of the time it takes up to 7x more time to install anything compared to other linux distros, even on relativly good hardware
- the packages repository is considerably smaller than other distros.
- sometimes I just don't need that much customization
to conclude, gentoo is a great distro but only for a very small user base
** Ubuntu
Ubuntu holds a special place in my heart, that is because it is the first distro I've used, or even heard about, but now that I use a relativly more complex system, I've came to realise that ubuntu has it's problems:
- *ubuntu is slow* at least for what I now consider slow, because that was my first distro I didnt even know that an operating system could be any faster than that
- bloated by default: even with the minimal option selected, ubuntu is still very bloated, it comes with gnome as a DE and an office suite etc..
that said ubuntu is still great for the new distro and is generally much better than windows, it is also very widely used in servers.
** Distros I want to try out in the future
there are many distros I want to take a look at in the near future, the main two are =NixOS= and =Bedrock Linux= !

and that is pretty much it, thanks for reading !
* How to make a blog with hugo and org-mode :hugo:orgmode:tutorial:
:PROPERTIES:
:EXPORT_FILE_NAME: blogging-setup-hugo-and-org
:EXPORT_DESCRIPTION: A tutorial on how to start your own blog using hugo and org mode
:EXPORT_DATE: 2021-10-20
:EXPORT_AUTHOR:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :author "Youssef Bouzekri" :toc true
:END:
Yesterday, I've rewritten my blog using [[https://gohugo.io/][Hugo]] , but with a spin; instead of using the usual ~markdown -> hugo -> html~, I've went with ox-hugo which adds another layer to this process so it becomes ~org -> markdow -> hugo -> html~ and I've done this for a few reasons
- I am already using org-mode for my private notes, if I ever decide to make a note public that would be very easy with both my private and public notes using the same syntax
- ox-hugo is really easy to use, especially since I am using [[https://github.com/hlissner/doom-emacs][Doom Emacs]] and it can be enabled as an org-mode flag using ~(org +hugo)~
so, with that said, let's get into the fun stuff !

** Starting a new hugo blog
go ahead and install hugo, either from your distro's package manager or using npm (~npm -g hugo-cli~). for me, I'll be using pacman
#+begin_src bash
sudo pacman -S hugo
#+end_src
next, initialize your hugo project, using their cli
#+begin_src bash
hugo new site project-name
#+end_src
this will create a directory called ~project-name~ that contains the project starter
next, you need to pick a theme for your blog, you can find some community-made themes in [[https://themes.gohugo.io/][Hugo's Website]]

[[/img/hugo-themes.png]]
once you've picked a theme that you like, just clone the github repo into your Hugo's theme directory (~project-name/themes~)
#+begin_src bash
git clone https://github.com/rhazdon/hugo-theme-hello-friend-ng.git themes/hello-friend-ng
#+end_src
finally update your ~config.toml~ to apply the theme that you've just downloaded, and while you're at it, you might as well update the blog's metadata (title, description, language, etc..)
#+begin_src conf
baseurl      = "/"
title        = "My Blog"
languageCode = "en-us"
theme        = "theme-name"
...
#+end_src
you can now visit your site by running this command and opening localhost on port =1313=
#+begin_src bash
[youssef@tux ~/repos/hugo-blog]$ hugo server -D
Start building sites â€¦
hugo v0.88.1+extended linux/amd64 BuildDate=unknown

                   | EN
-------------------+-----
  Pages            | 16
  Paginator pages  |  0
  Non-page files   |  0
  Static files     | 19
  Processed images |  0
  Aliases          |  4
  Sitemaps         |  1
  Cleaned          |  0

Built in 586 ms
Environment: "development"
Serving pages from memory
Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender
Web Server is available at //localhost:1313/ (bind address 127.0.0.1)
#+end_src
** Installing and configuring ox-hugo
ox-hugo is the package we are going to use to transform our org file(s) to markdown which then will be parsed by hugo
*** Installing ox-hugo
**** Vanilla emacs
you can install ox-hugo using =use-package=
#+begin_src elisp
(use-package ox-hugo
  :ensure t            ;Auto-install the package from Melpa (optional)
  :after ox)
#+end_src
**** Doom emacs
You can enable hugo by just adding the hugo flag to the org module in your ~init.el~ so it looks something like this ~(org +hugo)~
*** Integrating ox-hugo into our hugo blog
there are two ways to use ox-hugo:
1. all the posts in one org file, one post per-subtree (*Recommended*)
2. one post per org file
you may be more familiar with the second option but having all of the posts in one file has its benefits too
- makes the meta-data management for Hugo front-matter pretty effortless.
- you can use org mode's [[https://orgmode.org/manual/Tag-Inheritance.html][Tag Inheritance]] feature
so now that is out of the way, start by creating an org-file in your project's root, you can call it whatever you want. next, add a local variable at the top of the page and call it ~HUGO_BASE_DIR~ and set this to the absolute path to your hugo project, for me that looks something like this
#+begin_src elisp
#+HUGO_BASE_DIR: ~/repos/hugo-blog
#+end_src
*** Write your first post !
to make a new post you just need to add a new top-level heading to the org-file that we created, but you also need a bit of metadata. here is an example post:
#+begin_src org
,* Blog Post name
:properties:
:export_file_name: blog-post-name-in-url
:export_description: my cool post
:export_date: 2021-10-18
:export_author: your name
:end:
post's content !
#+end_src
finally to export the file to markdown you can run the ~org-hugo-export-wim-to-md~ function to export the blogpost to markdown and place it in the content folder in your hugo project
on doom emacs, you can also use the keybinding ~SPC m e H H~ to do the same thing
now if you open ~localhost:1313~ (make sure the hugo server is still running) you will see your newly created blog post show up !

And that's about it, I hope you've found this helpful, if you made you blog using this guide, tweet me over at [[https://twitter.com/spcbfr][@spcbfr]] and I'll make sure to check it out !
* A noob's guide into the orgmode syntax :orgmode:
:PROPERTIES:
:EXPORT_FILE_NAME: orgmode-syntax
:EXPORT_DESCRIPTION: Getting started with org-mode
:EXPORT_DATE: 2021-11-01
:EXPORT_AUTHOR:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :author "Youssef Bouzekri" :cover "/img/orgmode-syntax-basics.png"
:END:
So you've been hearing a lot about emacs's killer feature, orgmode and how powerful and customizable it is, so you decided to give it a try. you download doom emacs but then get stuck because you are unsure of how to start. In this guide I'll demonstrate how to use orgmode and how to get the most out of it.
** Headings
Unlike markdown where you would use the pound sing # to set headings, in orgmode we use the asktrisk sign followed by a space, this would only work if you have the asktrisk at the start of the line, as per other markup languages 1 astrisk means a heading 1, 2 astrisks means a heading 2,etc..
here is how headings look in action

{{< figure src="/img/org-headings.png" alt="Headings Example" position="center" style="border-radius: 8px;" caption="Figure 1: How headings look in action" >}}

as you can see, headings are automatically indented, and astrisks are replaced with unicode characters using the [[https://github.com/integral-dw/org-superstar-mode][Org Superstar package]].
You can change the current heading hierarchy by pressing ~M-leftarrow~ or ~M-rightarrow~ when you are directly above a heading. you can also move headings along with their content across the document using ~M-uparrow~ or ~M-downarrow~. pressing ~C-enter~ when directly above a heading will create another heading of the same hierarchy.
** Emphasis
| Feature       | orgmode                                                                     | markdown                                                                     |
|---------------+-----------------------------------------------------------------------------+------------------------------------------------------------------------------|
| Bold          | ~*text*~                                                                    | ~**text**~                                                                   |
| Italic        | ~/text/~                                                                    | ~*text*~                                                                     |
| Inline Code   | ~~code~~                                                                    | ~`code`~                                                                     |
| Highlight     | ~=text=~ (usually rendered in green)                                        | This feature does not exist in markdown unless you use the html tag ~<mark>~ |
| Underline     | ~_text_~                                                                    | This is also not supported in markdown unless using the html ~<ins>~ tag     |
| Strikethrough | ~+deleted text+~                                                            | ~~~deleted text~~~                                                           |
| Quote         | ~#+begin_quote your quote #+end_quote~ you can also just type ~quote <TAB>~ | > your quote                                                                 |
| Hyperlinks    | ~[[Link][Description]]~                                                     | ~[Description][Link]~                                                        |
#+begin_quote
*TIP*: you can add ~(setq org-hide-emphasis-markers t)~ to your configuration, to hide markup elements in orgmode files
#+end_quote

* My terminal-based music setup :music:commandline:linux:
:PROPERTIES:
:EXPORT_FILE_NAME: music-term-setup
:EXPORT_DESCRIPTION: The proper way to listen to music
:EXPORT_DATE: 2021-11-24
:EXPORT_AUTHOR:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :author "Youssef Bouzekri"
:END:
** Introduction
despite having some of the worst names ever, ncmpcpp, mpc and mpd make the best music setup on linux in my opinion, let's go through their pros and cons first

*Pros*
- terminal based
- free and open source
- familiar user interface
- absolutely no ads
- built-in Lyrics fetcher

*Cons*
- Offline, meaning you will have to download everything you want to listen to
- Can be a hastle to configure when you are getting started
** the difference between mpd and ncmpcpp and mpc
These tools work together to achieve a good music system through a server-client relationship. in this case *mpd is the server* while *Mpc and ncmpcpp are the clients*. you can have the server running in the background controled by your init system and control it through one of the clients, that means that you can close your client without the music stopping since that mpd, the server, is still running.

now the one question left is, since mpc and ncmpcpp are both clients what is the difference between them and why do most people use both at the same time?
mpc is command based, meaning that you type the commands in the terminal to control it (like ~mpc pause~, ~mpc next~ and ~mpc toggle~ just to list some examples.) where ncmpcpp has a terminal graphical interface that looks like this

{{< figure src="/img/ncmpcpp.png" alt="Headings Example" position="center" style="border-radius: 8px;" caption="Figure 1: ncmpcpp's example interface" >}}
why do we use both then? well, because most people bind the most common mpc commands to keyboard shortcuts through their window manager or desktop environment ! I'll look at how to bind mpc keys later in the blog post
** installing and configuring mpd
we will first start by installing mpd, which is as we said the server that manages your music collection. it is in the main repositories for most distros. on arch you can install it through pacman
#+begin_src shell
sudo pacman -S mpd
#+end_src
mpd doesnt create a configuration file by default, so go ahaid and create an ~mpd~ directory in your config dir (usually in ~~/.config~).
next create a file in that directory named mpd.conf, here is my configuration
#+begin_src toml
music_directory "/home/youssef/music/"
playlist_directory "/home/youssef/.config/mpd/playlists"
db_file "/home/youssef/.config/mpd/mpd.db"
log_file "/home/youssef/.config/mpd/mpd.log"
pid_file "/home/youssef/.config/mpd/mpd.pid"
state_file "/home/youssef/.config/mpd/mpdstate"
audio_output {
	type "pulse"
	name "pulse audio"
}

bind_to_address "127.0.0.1"
port "6601"
#+end_src
let's look at the most important parts:
1. *music_directory* you need to set this to your actual music folders. if this is not set up, mpd will use the the default XDG directory which is ~~/Music~ make sure to replace `youssef` with your actual username
2. *port* the default port is 6600 but that is used for something else on my system, so I'll have to use port 6601, if this is the case for you too, make sure to have this line in your config
3. *playlist_directory* this important if you want playlists enabled, if you want this, the direcotry should already exist

finally you will want to start mpd, if you are on a systemd distro you can use *systemctl*
#+begin_src shell
sudo systemctl start mpd # starting mpd for the current session
sudo systemctl enable mpd # run this if you want ot start mpd on startup
#+end_src
** Installing and configuring the clients
next, we will need to setup the two clients *mpc* and *ncmpcpp*, both of the clients can be found in the default repos for most distros, since I am on arch I'll use pacman but apt or dnf will work fine
#+begin_src shell
sudo pacman -S mpc ncmpcpp
#+end_src
now, let's configure ncmpcpp, go ahead and create a configuration dir in ~~/.config/ncmpcpp/~ we will need two files:
1. *bindings* for keyboard bindings
2. *config* for other general configuration (look and feel, functionality, etc..)
since ncmpcpp doesnt come with vim bindings out of the box, I was always looking for a set of vim bindings for the client (because I am two lazy to make one myself :)) I've recently found [[https://gitlab.com/LukeSmithxyz/voidrice/-/blob/master/.config/ncmpcpp/bindings][this]] set of vim-inspired keybindings done by luke smith as part of the larbs bootstraping script so that is what I am using for my keybindings. and here is my main configuration file
#+begin_src toml
# general
autocenter_mode = "yes"
follow_now_playing_lyrics = "yes"
ignore_leading_the = "yes"
ignore_diacritics = "yes"

# seeking
incremental_seeking = "yes"
seek_time = "1"

# display
playlist_editor_display_mode = "columns"
search_engine_display_mode = "columns"
browser_display_mode = "columns"
playlist_display_mode = "columns"

# songlist
song_columns_list_format = "(10)[blue]{l} (30)[green]{t} (30)[magenta]{a} (30)[yellow]{b}"
song_list_format = "{$7%a - $9}{$5%t$9}|{$5%f$9}$R{$6%b $9}{$3%l$9}"

# colors
colors_enabled = "yes"
empty_tag_color = magenta
main_window_color = white
progressbar_color = black:b
progressbar_elapsed_color = blue:b
statusbar_color = red
statusbar_time_color = cyan:b

# progress
progressbar_look = "=>-"

# other
system_encoding = "utf-8"
regular_expressions = "extended"

[current item]
current_item_prefix = "$(blue)$r"
current_item_suffix = "$/r$(end)"
current_item_inactive_column_prefix = "$(cyan)$r"

# interface
user_interface = "alternative"
display_volume_level = yes
alternative_header_first_line_format = "$0$aqqu$/a {$6%a$9 - }{$3%t$9}|{$3%f$9} $0$atqq$/a$9"
alternative_header_second_line_format = "{{$4%b$9}{ [$8%y$9]}}|{$4%D$9}"

# navigation
cyclic_scrolling = "yes"
header_text_scrolling = "yes"
jump_to_now_playing_song_at_start = "yes"
lines_scrolled = "2"

# Now playing
now_playing_prefix = "> "
centered_cursor = "yes"

# misc
display_bitrate = "no"
enable_window_title = "yes"
empty_tag_marker = ""
#+end_src
** Bonus: setting up mpc keybindings in xmonad and a song module in xmobar
*** mpc keybindings in xmonad
I am currently using the fantastic Window Manager Xmonad along with xmobar for the top bar. I have of course integrated my music setup into xmonad. you can add the following lines to your keyboard bindings variable to control mpc through the keybindings, you can also change the actual keybindings used
#+begin_src haskell
-- ...
, ("<XF86AudioPlay>", spawn "mpc toggle")
, ("<XF86AudioStop>", spawn "mpc stop")
, ("<XF86AudioPrev>", spawn "mpc prev")
, ("<XF86AudioNext>", spawn "mpc next")
-- ...
#+end_src
*** mpd module in xmobar
Most people have song change notifications setup with mpd but for me, I prefer a simple module in my bar that shows the current playing song, for this I am using the following script. *make sure this script is exectuable and in your PATH*
#+begin_src shell
#!/bin/bash

TCOL="#DFDFDF"    # The colour to be used to draw the song title when playing
ACOL="#9ca0a4"    # The colour to be used to draw the song artist when playing
PCOL="#73797e"    # The colour to be used to draw both the song title and artist when paused

MPDSTATE=$(mpc | sed -e '2 !d' -e 's/^.*\[//' -e 's/\].*$//')

if [ $MPDSTATE == "playing" ]; then
  # MPD is playing
  echo "<fc=$ACOL>$(mpc current | sed "s/ - /\<\/fc\> - \<fc=$TCOL>/")</fc>"
elif [ $MPDSTATE == "paused" ]; then
  # MPD is paused
  echo "<fc=$PCOL>$(mpc current)</fc>"
fi
#+end_src
and then I simply add this script to my xmobarrc
#+begin_src haskell
, Run Com "xmobar-music" [] "music" 10
#+end_src

this module will look like this in action
{{< figure src="/img/xmobar-music.png" alt="Headings Example" position="center" style="border-radius: 8px;" caption="Figure 2: xmobar's music module " >}}
* How to patch suckless programs :suckless:linux:git:
:PROPERTIES:
:EXPORT_FILE_NAME: patching-suckless
:EXPORT_DATE: 2021-11-28
:EXPORT_DESCRIPTION: a personal cheatsheet for patching suckless programs
:EXPORT_AUTHOR:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :author "Youssef Bouzekri"
:END:

Suckless is a group of developers who make programs that stick to the unix philosophy of *doing one thing and doing it well*. they have developed programs like dwm, dmenu and st, which are all minimal by design.

The main feature of suckless programs is the way they are configured. instead of having to edit a config file that has a weird syntax. you go and edit the source code of the actual program itself. that means that every different configuration of suckless programs is almost like a fork of the original project.

most of these programs are written in C. but you dont need to do every bit of code to configure suckless programs on your own because members of the community have made "patches", that you can download and add to your build. these patches do all sorts of things that wouldnt be easy to implement for most users. in this blogpost we will look into how to patch these programs and how to remove patches if you end up hating them.

#+begin_quote
This is sort of a personal cheatsheet for me, because I always forget how to patch suckless stuff :)
#+end_quote

first open the [[https:suckless.org][suckless website]] and find a program that you want to use and clone it. in this example I'll demonstrate using the dmenu tool which is an app launcher that can also do a bunch of other stuff
#+begin_src shell
git clone https://git.suckless.org/dmenu
cd dmenu
#+end_src

next open the patches tab from the sidebar and find a patch you want to apply. for example i'll add a patch called [[https:https://tools.suckless.org/dmenu/patches/border/][border]] that adds a colored border to your dmenu prompt. to do that you will need to navigate to the patch page. find the download link and download it. I prefer to use ~wget~ but you can right click and choose save link as. make sure to download the file to the directory for your suckless program
#+begin_src shell
wget https://tools.suckless.org/dmenu/patches/border/dmenu-border-20201112-1a13d04.diff
#+end_src
next is the most important step we will use the ~patch~ command to apply the patch to the program

#+begin_src shell
patch -p1 < name-of-patch.diff
#+end_src

finally compile the code using the ~make~ command
#+begin_src shell
sudo make install
#+end_src

and that's about it ! make sure to leave a comment if you've found any problems and I'll be happy to help
* My linux journey :linux:
:PROPERTIES:
:EXPORT_FILE_NAME: linux-journey
:EXPORT_DATE: 2021-11-29
:EXPORT_AUTHOR:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :author "Youssef Bouzekri"
:END:

I've been using Linux exclusively for a bit over 2 years now and it is honestly the best decision I've ever made in my life. by using Linux not only did I form an understanding of how gnu/Linux works and how to use its tools. but I also discovered some of the best open-source projects I've ever seen like gimp, firefox, and MPV.

In around 2017, I found a Linux [[https:https://www.udemy.com/course/learn-ethical-hacking-from-scratch/][hacking course]] on udemy that was on sale. I decided to give it a go and see what I would learn!
the first chapter was on installing kali Linux on a virtual machine. back then I knew nothing about Linux and that was my first encounter with the OS. I ended up not finishing the course because running Linux in a VM on a 14 years old machine was pretty slow but I still learned the basics like navigating the system from the command line and downloading software through apt.

A few years go by and I decide to give Linux another go, but this time not for hacking or pen-testing. just regular daily usage because I got sick of windows slowness and I wanted something new since I had been using Windows my whole life basically. and as with most other Linux users I decided to try out ubuntu first. it was the most well-known one and even though it is not my recommended distro right now for beginners it still works pretty well. so I did it... looked up a tutorial on how to dual boot ubuntu and Linux, downloaded the iso, and installed it.
{{< figure src="/img/ubuntu.png" alt="Headings Example" position="center" style="border-radius: 8px;" caption="Figure 1: Ubuntu 20.04" >}}
for the first few days, I was switching between windows and ubuntu constantly but as the months went by, I started booting into ubuntu more and more often, and at some point, windows became just a meaningless option in grub.

And just to clarify, at this point, I wasn't using any of the programs I am using today like vim, emacs, and Window managers, ubuntu was pretty much a bootloader for firefox.

one day, while browsing [[https:reddit.com/r/unixporn][r/unixporn]] I came across a very, /very/ beatiful rice of arch linux. so I decided to get that kind of look and even though the github page had a warning that it will delete old configuration files and that it may break my system. I mindlessly installed the dotfiles and rebooted my system and it all looked very messed up. I, being a noob in the linux world didnt know how to fix the issue so I decided it was time to switch to something else, but instead of trying out something that is begginer friendly and has a nice GUI, I went straight into arch linux.

I found a [[https:https://www.youtube.com/watch?v=4PBqpX0_UOc][tutorial]] on how to install arch linux by luke smith (great channel btw). I installed arch with a couple of failed attempts but ended up succeding. I then decided to install kde because I had been using gnome for a little bit on ubuntu and I got a bit bored of it.

a few weeks later I discovered brodie robertson, a linux youtuber who, at the time was using bspwm, around that time luke smith also made a video talking about bspwm and how good it is and I thought that was enough for me to make the switch. I have had a very small experience with Window managers before as I have once tried installing i3 but that failed miserably and I never came back to i3 again. anyways going back to bspwm, since I had the whole summer to play with it I decided to try and rice it on my own instead of using someone else's rice, I went with the gruvbox colorscheme

{{< figure src="/img/bspwm-rice.png" alt="Headings Example" position="center" style="border-radius: 8px;" caption="Figure 2: My first rice using bspwm" >}}

And a few months later, I discovered [[https:larbs.xyz][larbs]], a bootstrapping script created to make it easier to install luke smith's arch linux configuration, which came with dwm and st and dmenu (basically the whole suckless collection) and I got hooked to the suckless philosophy.

and here I am now, currently using my own build of xmonad after leaving larbs to create something on my own, the dotfiles are not completly ready yet but I hope that I will be able to make my own bootstrapping script sometime this year.

{{< figure src="/img/xmonad-rice.png" alt="Headings Example" position="center" style="border-radius: 8px;" caption="Figure 3: my current system using arch and xmonad" >}}

and that's about it !
